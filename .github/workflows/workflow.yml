name: Workflow
on:
  push:
    branches: [ main ]
    tags:
      - v**
  pull_request: { }

jobs:
  required-meta:
    permissions:
      contents: read
      checks: write
      pull-requests: write
    uses: BlindfoldedSurgery/actions-meta/.github/workflows/required.yml@v1

  check-commits:
    uses: BlindfoldedSurgery/actions-releases/.github/workflows/commitizen-check.yml@v4
    with:
      build-tool: uv
      python-version: "3.13"

  lint:
    strategy:
      matrix:
        python-version: [ "3.13", "3.12" ]
    uses: BlindfoldedSurgery/actions-python/.github/workflows/lint.yml@v5
    with:
      build-tool: uv
      python-version: ${{ matrix.python-version }}

  post-lint:
    runs-on: ubuntu-24.04
    if: github.event_name == 'pull_request'
    needs: lint
    steps:
      - run: echo "All lints passed"

  test:
    strategy:
      matrix:
        python-version: [ "3.13", "3.12" ]
    uses: BlindfoldedSurgery/actions-python/.github/workflows/test.yml@v5
    with:
      build-tool: uv
      python-version: ${{ matrix.python-version }}
      submit-coverage: ${{ matrix.python-version == '3.12' }}
      tests-selector: not local
    secrets:
      CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  test-migrations-postgres:
    strategy:
      matrix:
        postgres-version: [ "14", "15", "16" ]
    runs-on: ubuntu-24.04
    container: flyway/flyway:11.13
    services:
      postgres:
        image: postgres:${{ matrix.postgres-version }}
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
    steps:
      - uses: actions/checkout@v5
      - run: flyway migrate -skipCheckForUpdate
        working-directory: migrations/postgres
        env:
          FLYWAY_URL: jdbc:postgresql://postgres:5432/postgres
          FLYWAY_USER: postgres
          FLYWAY_PASSWORD: postgres

  test-migrations-sqlite:
    runs-on: ubuntu-24.04
    container: flyway/flyway:11.13
    steps:
      - uses: actions/checkout@v5
      - run: flyway migrate -skipCheckForUpdate
        working-directory: migrations/sqlite

  post-test:
    runs-on: ubuntu-24.04
    if: github.event_name == 'pull_request'
    needs:
      - test
      - test-migrations-postgres
      - test-migrations-sqlite
    steps:
      - run: echo "All tests passed"

  extract-version:
    runs-on: ubuntu-24.04
    outputs:
      version: ${{ steps.extract.outputs.version }}
    env:
      # renovate: datasource=pypi depName=uv versioning=semver-coerced
      UV_VERSION: 0.8.22
    steps:
      - uses: actions/checkout@v5
      - uses: astral-sh/setup-uv@v6
        with:
          enable-cache: false
          version: ${{ env.UV_VERSION }}
      - name: Read version from pyproject.toml
        id: extract
        run: |
          VERSION=$(uvx --from=toml-cli toml get --toml-path pyproject.toml project.version)
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"

  build-migrations-container-image:
    needs:
      - extract-version
      - lint
      - test
      - test-migrations-postgres
      - test-migrations-sqlite
    strategy:
      matrix:
        sql-dialect: [ "postgres", "sqlite" ]
    uses: preparingforexams/actions-container/.github/workflows/build-dual-image-kaniko.yml@v7
    with:
      additional-build-args: |
        DIALECT=${{ matrix.sql-dialect }}
      context: 'migrations'
      push-image: ${{ startsWith(github.ref, 'refs/tags/v') }}
      image-name: rate-limiter-migrations-${{ matrix.sql-dialect }}
      version: ${{ needs.extract-version.outputs.version }}

  post-build-migrations-container-image:
    runs-on: ubuntu-24.04
    if: "!cancelled() && github.event_name == 'pull_request'"
    needs: build-migrations-container-image
    steps:
      - run: |
          if [ "true" == "${{ contains(needs.*.result, 'failure') }}" ]
          then
            echo "A required job failed"
            exit 1
          else
            echo "All required jobs passed"
          fi

  publish-package:
    uses: BlindfoldedSurgery/actions-python/.github/workflows/publish-package.yml@v5
    needs:
      - lint
      - test
      - test-migrations-postgres
      - test-migrations-sqlite
    if: success() && startsWith(github.ref, 'refs/tags/v')
    with:
      build-tool: uv
      python-version: '3.12'
      pypi-username: ${{ vars.PYPI_USERNAME }}
    secrets:
      pypi-password: ${{ secrets.PYPI_PASSWORD }}
